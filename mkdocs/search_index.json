{
    "docs": [
        {
            "location": "/cv/", 
            "text": "Matt Anderson 2015\n\n\n\n\n\nProgramming Languages\n\n\n\n\n10+ years experience with Python (expert)\n\n\n10+ years experience with shell (expert)\n\n\n3 years experience with Puppet (middling)\n\n\n5 years experience with Javascript (middling)\n\n\n4 years experience with Java \n C (very rusty now)\n\n\nHaskell, Scheme, Lisp off and on (mere enthusiast)\n\n\n\n\nDevOps, Automation, Etc\n\n\n\n\nJenkins/Hudson, Vagrant\n\n\nPuppet, fabric, boto\n\n\nAWS: Elasticbeanstalk, SQS, EC2, \n S3\n\n\nNagios, Graphite\n\n\nELK stack (mere enthusiast)\n\n\nAPM with vendors like Datadog \n Newrelic\n\n\n\n\nSpecial Expertise\n\n\n\n\nRESTful API design and best practices\n\n\nStrategies for devops, continuous integration\n\n\nPython: from functional to complex OO and crazy metaprogramming\n\n\nDjango: especially performance, automated testing, and admin mods\n\n\nRapid prototyping, feasibility studies, and project automation\n\n\nPlatform architecture \n configuration management\n\n\nMathematical modeling (e.g. Queueing, visualization, simulation)\n\n\n\n\nWeb Frameworks\n\n\n\n\nDjango: 7+ years of professional experience\n\n\nFlask \n Twisted: 4 years mixed professional/personal experience\n\n\n\n\nWebservers, DBs, Task Queues, etc\n\n\n\n\nNginx, Apache, \n Tornado\n\n\nRDBs: Postgres \n MySQL, with and without Amazon RDS\n\n\nNoSQL and friends:\n\n\nSolr 3 \n 4, strict and dynamic schemas\n\n\nCouchDB, Mongo, Redis\n\n\nZookeeper, DynamoDB\n\n\n\n\n\n\nRabbitMQ \n Celery, Amazon SQS\n\n\n\n\nEducation\n\n\n\n\nNo degree, ~85% of credits completed on Mathematics / CS double-major\n\n\nMostly at GeorgiaTech; a few credits from UC Berkeley\n\n\n\n\nWork experience\n\n\n\n\nUbiquitous Computing Laboratory, College of Computing, GaTech.\n\n\n(Undergraduate Researcher; 3 years)\n\n\nDARPA-funded research, mostly on gesture recognition\n\n\nCoauthor for technical paper; results now used in google glass!\n\n\nWork involved prototyping electronics, code, algorithms\n\n\n\n\n\n\nVanderbilt University, Learning Laboratory\n\n\n(Java web dev; summer internship)\n\n\nUsing Tomcat / Spring\n\n\nProduct was educational technology (distance learning)\n\n\n\n\n\n\nLots of random stupid startups \n contract programming\n\n\n(Freelance; 3 years)\n\n\nMostly websites; everything from social networking to e-commerce\n\n\nCooler projects include: Fleet-tracking with RT GPS data; VoIP apps\n\n\n\n\n\n\nCox Media Group\n\n\n(Software developer, Platform team; 4 years)\n\n\nSaw department grow from 10 developers to 50+\n\n\nQuickly built a monolithic core and had to tear it down into services\n\n\nInstrumental in defining our testing, docs, \n automation culture\n\n\nDesigned and implemented infrastructure testing strategies \n parallel testing\n\n\nHelped scaling existing legacy architecture and\n\n\nDesigned and implemented the AWS replacement with zero downtime\n\n\n\n\n\n\nNaxos Inc.\n\n\n(Consulting Software Architect; ongoing)\n\n\nDesign and implementation of cloud-based music services\n\n\nDesigned and implemented CI \n release procedures\n\n\nMigration of assets to AWS, misc automation\n\n\n\n\n\n\n\n\n\n\n\n\nOpen source\n\n\n\n\nSeveral libraries on PyPi: tunl, goulash, reporting\n\n\nContributor to jenkinsapi, IPython, fabric, haystack, and others\n\n\nAuthor of SmaSh shell ( http://mattvonrocketstein.github.io/smash )\n\n\nAuthor of toybox ( http://github.com/mattvonrocketstein/toybox )\n\n\nAuthor of ymir ( http://github.com/mattvonrocketstein/ymir )\n\n\n\n\nWorkflows of Choice\n\n\n\n\nArchitecture: microservices not monoliths!\n\n\nTeam: Given a choice, prefer agile with small teams\n\n\nInfrastructure: configured programmatically and deployed from images\n\n\nDevelopment: prefer API-first or docs-first approach, sometimes TDD\n\n\nEditor / VCS: Emacs; git with feature-branching and rebasing workflow\n\n\nOS: Linux (user since age 12!), lately as vbox guest in OSX host\n\n\nWM: XMonad\n\n\n\n\nAbout Me\n\n\n\n\n30 years old, American citizen\n\n\nAccomplished trekker, amateur mountaineer\n\n\nEnthusiastic cyclist, very bad kayak pilot\n\n\nSculptor, poet, and soccer player\n\n\nBook nerd, math geek, world traveler\n\n\n\n\nContact\n\n\n\n\nE-mail: mattvonrocketstein[at]gmail[dot]com\n\n\nSkype: mvr123456", 
            "title": "Abbreviated CV"
        }, 
        {
            "location": "/cv/#programming-languages", 
            "text": "10+ years experience with Python (expert)  10+ years experience with shell (expert)  3 years experience with Puppet (middling)  5 years experience with Javascript (middling)  4 years experience with Java   C (very rusty now)  Haskell, Scheme, Lisp off and on (mere enthusiast)", 
            "title": "Programming Languages"
        }, 
        {
            "location": "/cv/#devops-automation-etc", 
            "text": "Jenkins/Hudson, Vagrant  Puppet, fabric, boto  AWS: Elasticbeanstalk, SQS, EC2,   S3  Nagios, Graphite  ELK stack (mere enthusiast)  APM with vendors like Datadog   Newrelic", 
            "title": "DevOps, Automation, Etc"
        }, 
        {
            "location": "/cv/#special-expertise", 
            "text": "RESTful API design and best practices  Strategies for devops, continuous integration  Python: from functional to complex OO and crazy metaprogramming  Django: especially performance, automated testing, and admin mods  Rapid prototyping, feasibility studies, and project automation  Platform architecture   configuration management  Mathematical modeling (e.g. Queueing, visualization, simulation)", 
            "title": "Special Expertise"
        }, 
        {
            "location": "/cv/#web-frameworks", 
            "text": "Django: 7+ years of professional experience  Flask   Twisted: 4 years mixed professional/personal experience", 
            "title": "Web Frameworks"
        }, 
        {
            "location": "/cv/#webservers-dbs-task-queues-etc", 
            "text": "Nginx, Apache,   Tornado  RDBs: Postgres   MySQL, with and without Amazon RDS  NoSQL and friends:  Solr 3   4, strict and dynamic schemas  CouchDB, Mongo, Redis  Zookeeper, DynamoDB    RabbitMQ   Celery, Amazon SQS", 
            "title": "Webservers, DBs, Task Queues, etc"
        }, 
        {
            "location": "/cv/#education", 
            "text": "No degree, ~85% of credits completed on Mathematics / CS double-major  Mostly at GeorgiaTech; a few credits from UC Berkeley", 
            "title": "Education"
        }, 
        {
            "location": "/cv/#work-experience", 
            "text": "Ubiquitous Computing Laboratory, College of Computing, GaTech.  (Undergraduate Researcher; 3 years)  DARPA-funded research, mostly on gesture recognition  Coauthor for technical paper; results now used in google glass!  Work involved prototyping electronics, code, algorithms    Vanderbilt University, Learning Laboratory  (Java web dev; summer internship)  Using Tomcat / Spring  Product was educational technology (distance learning)    Lots of random stupid startups   contract programming  (Freelance; 3 years)  Mostly websites; everything from social networking to e-commerce  Cooler projects include: Fleet-tracking with RT GPS data; VoIP apps    Cox Media Group  (Software developer, Platform team; 4 years)  Saw department grow from 10 developers to 50+  Quickly built a monolithic core and had to tear it down into services  Instrumental in defining our testing, docs,   automation culture  Designed and implemented infrastructure testing strategies   parallel testing  Helped scaling existing legacy architecture and  Designed and implemented the AWS replacement with zero downtime    Naxos Inc.  (Consulting Software Architect; ongoing)  Design and implementation of cloud-based music services  Designed and implemented CI   release procedures  Migration of assets to AWS, misc automation", 
            "title": "Work experience"
        }, 
        {
            "location": "/cv/#open-source", 
            "text": "Several libraries on PyPi: tunl, goulash, reporting  Contributor to jenkinsapi, IPython, fabric, haystack, and others  Author of SmaSh shell ( http://mattvonrocketstein.github.io/smash )  Author of toybox ( http://github.com/mattvonrocketstein/toybox )  Author of ymir ( http://github.com/mattvonrocketstein/ymir )", 
            "title": "Open source"
        }, 
        {
            "location": "/cv/#workflows-of-choice", 
            "text": "Architecture: microservices not monoliths!  Team: Given a choice, prefer agile with small teams  Infrastructure: configured programmatically and deployed from images  Development: prefer API-first or docs-first approach, sometimes TDD  Editor / VCS: Emacs; git with feature-branching and rebasing workflow  OS: Linux (user since age 12!), lately as vbox guest in OSX host  WM: XMonad", 
            "title": "Workflows of Choice"
        }, 
        {
            "location": "/cv/#about-me", 
            "text": "30 years old, American citizen  Accomplished trekker, amateur mountaineer  Enthusiastic cyclist, very bad kayak pilot  Sculptor, poet, and soccer player  Book nerd, math geek, world traveler", 
            "title": "About Me"
        }, 
        {
            "location": "/cv/#contact", 
            "text": "E-mail: mattvonrocketstein[at]gmail[dot]com  Skype: mvr123456", 
            "title": "Contact"
        }, 
        {
            "location": "/work/", 
            "text": "Matt Anderson 2015\n\n\n\n\n\nNaxos, Inc\n\n\nContracted Software Architect/Automation Engineer; 2015 - present\n\n\n\n\nDesigned and implemented key parts of cloud-based music services stack in AWS\n\n\nSystem implements one-time downloads with mailinglist integration, using cloudfront as a CDN, written with Django on Elasticbeanstalk\n\n\nDelivered programmatic infrastructure (puppet) for reusable microservices that do caching, configuration, scheduling, task queue workers, etc.\n\n\nDefined from scratch continuous integration workflows and procedures for a team of 10, focusing on iterative improvements without disrupting current developer throughput, and\n\n\nSetup Jenkins and created build jobs to execute the new workflows.\n\n\nLearned reporting with datadog APM, implemented various new monitors and alerts\n\n\nAssisted with proof-of-concept migrations of existing applications out of legacy datacenters and into AWS\n\n\nAddressed problems with existing manual data export tasks by creating automation for a more parallel ETL pipeline.  The old approach was a tangle of bash scripts, the new approach uses multiprocessing and SQS for messaging.\n\n\nGained experience working with Redis both as a developer and an administrator\n\n\n\n\nCox Media Group\n\n\nSoftware Developer; Senior software developer; Platform engineer\n\n\nOnsite in Atlanta 2010; Telecommuter 2011-2015\n\n\n\n\nWeb developer for the parent company of the Atlanta Journal constitution, I was responsible for day to day feature implemention on one of the largest multi-site Django installations in the world.\n\n\nWhen finished, our Django installation had about 50 models, hundreds of views, heavy ajax, and complex template inheritance.\n\n\nParticipated in code review, requirement generation, design discussions,\n\n\nDebugged production problems, and assisted with hotfixes\n\n\nWorked on document classification using opencalais and nltk\n\n\nCreated internal and customer-facing APIs for everything from our \"breaking news\" alerts to metadata search features used by mobile apps\n\n\nCreated highly customized, responsive interfaces for the Django admin panel\n\n\nWorked closely with multiple versions of Solr, pysolr, and haystack to implement site search\n\n\nWorked with celery and rabbitmq as both a developer and an administrator for application tasks outside of application request/response cycle\n\n\nPromoted to senior developer and \"platform team\" as department grew from 10 to 50+ developers\n\n\nWas tasked with ensuring that sites could scale smoothly, both in terms of our application performance and in terms of our teams ability to collaborate\n\n\nHelped to identify architectural problems and our technical debt, suggesting or implementing solutions\n\n\nHelped to champion \"eat your own dogfood\" approach to internal APIs\n\n\nHelped to define our release procedure standards including load tests, documentation, and static analysis\n\n\nAutomation work with Jenkins buildbot to collect and run unit tests across many thousands of lines of code in dozens of in-house libraries, third-party libraries and forks,  collecting code coverage data.\n\n\nAlso designed and implemented integration tests and infrastructure testing strategies\n\n\nReworked the testing harness to operate in parallel, thereby removing the biggest bottleneck in our continuous integration sysytem\n\n\nWrote and maintained puppet scripts to automate system administration tasks and pave and provision EC2 for microservices\n\n\nDesigned and created services for caching and cache-warming with queue-workers\n\n\nLearned to use newrelic for application monitoring\n\n\nWrote and maintained nagios checks\n\n\n\n\nFreelance Software Developer\n\n\nSan Francisco 2008 - 2011\n\n\n\n\nMostly web development, including 2 small e-commerce sites and 2 small social networks\n\n\nDesigned and created a fleet-tracking solution for San Francisco tour company with a web app and a hardware device, using real-time GPS data.  I was responsible for everything from hardware selection to finished software.  Hardware platform was a vehicle-powered embedded linux device with a cellular data connection.  The device was used used to announce stops and and inform hotel/airport ETA information.\n\n\nCustomizations to php-based asterisk software for a call-center application\n\n\n\n\nLearning Laboratory, Vanderbilt University \n\n\nSoftware developer, Nashville, 2008\n\n\n\n\nInterned in educational technology group developing software for distance learning\n\n\nProduct was highly interactive web application for online quizzes and other courseware using Java, Spring, and Tomcat.\n\n\nLearned to work independently\n\n\n\n\nUbiquitous Computing Laboratory, College of Computing, GaTech.\n\n\nUndergraduate Researcher, Atlanta 2004 - 2007\n\n\n\n\nInvolved in DARPA-funded research mostly on gesture recognition.\n\n\nDesigned and prototyped lower power wireless infrared electronics for tracking hand and finger movements.\n\n\nEvaluated AI algorithms for rogue object detection in sensor streams\n\n\nCoauthor for \ntechnical paper\n; results were used in google glass!\n\n\nLearned to work with budget requirements, manage time.  Learned to love skunkworks, rapid prototyping, and feasibility studies", 
            "title": "Detailed Work Experience"
        }, 
        {
            "location": "/projects/", 
            "text": "Matt Anderson 2015\n\n\n\n\n\nPersonal Projects\n\n\n\n\n\n\nSpock\n is a library I made for playing around with logic in python and also includes improvements I've made to the python \nAI:MA\n library.  The improvements fall into a few main categories: adding missing tests, improving the code to more idiomatically pythonic, and in a few cases adding missing features.\n\n\n\n\n\n\nSmash\n is an experimental command line shell for replacing bash with a hybrid system shell/python environment.  It is based on IPython\n\n\n\n\n\n\nTunl\n is a library and command-line utility for managing ssh tunnels on posix systems.  It's not super complicated, but it is documented, tested, and available on PyPi.\n\n\n\n\n\n\nYmir\n is a command-line devops utility/library for describing and deploying services on EC2.  In many respects it is similar to \nterraform\n, and I wrote this mainly to learn more about puppet and fabric.\n\n\n\n\n\n\nMy website\n is a MongoDB-backed flask application hosted on EC2.  Check out the integration with the Github and Google+ APIs \nhere\n and \nhere\n, respectively.  Behind the scenes I'm using it to experiment with ansible, elasticsearch, and the ELK stack.\n\n\n\n\n\n\nCode Samples\n\n\n\n\n\n\nCheck out the \nprojects\n section for complicated stuff that demonstrates documentation and unittests.  This section is for simpler snippets.\n\n\n\n\n\n\nsimple command line tool\n for talking to datadog\n\n\n\n\n\n\na \nmetaprogramming example\n that demonstrates some advanced knowledge of the python language\n\n\n\n\n\n\nI have a few random patches in the open source world, one in IPython \nhere\n and one in jenkinsapi \nhere\n\n\n\n\n\n\nLive Demos\n\n\n\n\n\n\nInterested employers and you can probably see the guts of \nmy builbot\n.\n\n\n\n\n\n\nAs a telecommuter, I've often recorded videos for feature demonstration, later training for content producers, and as a preliminary guide for other developers prior to handling documentation.  Interested employers can probably obtain samples.\n\n\n\n\n\n\nSee the \nproject\n section of this page for a link to my webpage.", 
            "title": "Projects, Demos, Code Samples"
        }, 
        {
            "location": "/projects/#personal-projects", 
            "text": "Spock  is a library I made for playing around with logic in python and also includes improvements I've made to the python  AI:MA  library.  The improvements fall into a few main categories: adding missing tests, improving the code to more idiomatically pythonic, and in a few cases adding missing features.    Smash  is an experimental command line shell for replacing bash with a hybrid system shell/python environment.  It is based on IPython    Tunl  is a library and command-line utility for managing ssh tunnels on posix systems.  It's not super complicated, but it is documented, tested, and available on PyPi.    Ymir  is a command-line devops utility/library for describing and deploying services on EC2.  In many respects it is similar to  terraform , and I wrote this mainly to learn more about puppet and fabric.    My website  is a MongoDB-backed flask application hosted on EC2.  Check out the integration with the Github and Google+ APIs  here  and  here , respectively.  Behind the scenes I'm using it to experiment with ansible, elasticsearch, and the ELK stack.", 
            "title": "Personal Projects"
        }, 
        {
            "location": "/projects/#code-samples", 
            "text": "Check out the  projects  section for complicated stuff that demonstrates documentation and unittests.  This section is for simpler snippets.    simple command line tool  for talking to datadog    a  metaprogramming example  that demonstrates some advanced knowledge of the python language    I have a few random patches in the open source world, one in IPython  here  and one in jenkinsapi  here", 
            "title": "Code Samples"
        }, 
        {
            "location": "/projects/#live-demos", 
            "text": "Interested employers and you can probably see the guts of  my builbot .    As a telecommuter, I've often recorded videos for feature demonstration, later training for content producers, and as a preliminary guide for other developers prior to handling documentation.  Interested employers can probably obtain samples.    See the  project  section of this page for a link to my webpage.", 
            "title": "Live Demos"
        }, 
        {
            "location": "/samples/", 
            "text": "Matt Anderson 2015\n\n\n\n\n\nI communicate architectural ideas with diagrams whenever it seems necessary for collaboration or for documentation for posterity.\n\n\nDiagram 1\n\n\nHere's a system I designed from scratch and helped to implement.  There are a few things I would change if I did it over, but I can defend the majority of the decisions.\n\n\n\n\nDiagram 2\n\n\nHere's a diagram outlining infrastructure assets for continuous deployment and on-demand ETL automation.", 
            "title": "Diagrams, Docs Samples"
        }, 
        {
            "location": "/samples/#diagram-1", 
            "text": "Here's a system I designed from scratch and helped to implement.  There are a few things I would change if I did it over, but I can defend the majority of the decisions.", 
            "title": "Diagram 1"
        }, 
        {
            "location": "/samples/#diagram-2", 
            "text": "Here's a diagram outlining infrastructure assets for continuous deployment and on-demand ETL automation.", 
            "title": "Diagram 2"
        }
    ]
}